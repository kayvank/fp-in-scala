#+startup: beamer
#+LaTeX_CLASS: beamer
#+BEAMER_FRAME_LEVEL: 2

* functional programming in Scala notes
  Yet another review of the [[https://www.manning.com/books/functional-programming-in-scala][fp in scala]]
** § 1
*** Referential Transparency, RT
    forces the invariant that everything a function does is represented by a value that is returned.
**** RT enables equational reasoning
*** Pure function 
** § 2
*** Polymorphic functions 
**** abstracting over types
     these are functions that work for any given type, also known as parametric polymorphism 
**** type parameters & type variable
** § 3
   Functional data structure
*** when function definition contains multiple argument groups, type info flows from left to right across args group
**** form [[http://www.cs.nott.ac.uk/~pszgmh/fold.pdf][fold]]
** § 4
   Handling errors without Exceptions
*** Variance 
    refers to how subtyping between more complex types relates to subtyping between their components 
*** covariant 
    subtyping relation of the simple types are preserved for the more complex types
*** contravariant
    The subtyping relationship is reversed for the more complex types
*** Option
**** lift functions to operate on Option
     def lift[A, B](f: A=>B): Option[A] => Option[B] = _ map f 
*** Either
**** used when Option is too simplistic for the use case
**** represent failure & exceptions with ordinary values
**** how: 
***** craft data type that encodes failure
***** _disjoint union_ of two types
** § 5
   Strickness & lazyness
*** Non-strickness
    to say a function is non-restrict <=> the function may choose  not to evaluate one or more of its args
*** Strict function always evaluates its arguments
*** thunk
    unevaluated form of an expression is called thunk

* Advanced functional Programming in Scala
** Mastering functions
*** val f: Int => Int = x => x*x 
    mapping from domain to codomain
*** higher order functions
    function that accepts or returns a functions
*** Combinator
    higher order functions that accepts or returns functions
*** Polymorphic Functions
    Polymorphic function is one that is universally qualified over one or more type parameter
#+BEGIN_SRC
case object identity {
  def apply[A](value: A): A = value
}
#END_SRC

** Mastering type
   types are compile time description of a set values
*** product type
    defined by Cartesian cross product on 2 more types  
#+BEGIN_SRC
type Point2D - (Int, Int)
#END_SRC
**** case class are product type
*** Sum types
    sum types are defined by disjoint union on 2 or more types
#+BEGIN_SRC
type RequestResult = Either[Error, HttpResponse]
#END_SRC
*** Sealed Traits
    in Scala sealed traits are idiomatic of sum types
*** Subtyping
*** Supertyping
*** Universals
    Universally-quantified type defines a category/kind of types that are parameterized by some arbitrary type. 
*** Type Constructors 
    type constructor is a universally quantified type, which can be used to construct types
